@page "/bets"

<PageTitle>BETS</PageTitle>

@using WebApp.Data
@inject BetService BetService

<h1>BETS</h1>
Filters:
<input placeholder="nick" @bind="nickFilter" @bind:event="oninput"/>
<input placeholder="race" @bind="raceFilter" @bind:event="oninput"/>

@if (sortedBets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm table-striped">
        <thead>
            <tr>
                <th>Race</th>
                <th>Nick</th>
                <th>Driver 1</th>
                <th>Driver 2</th>
                <th>Drtiver 3</th>
                <th>Points</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bet in sortedBets)
            {
                if (bet.Nick.ToLower().Contains(nickFilter.ToLower()) &&
                    bet.Race.ToLower().Contains(raceFilter.ToLower()))
                {
                    <tr>
                        <td>@bet.Race</td>
                        <td>@bet.Nick</td>
                        <td>@bet.Driver1</td>
                        <td>@bet.Driver2</td>
                        <td>@bet.Driver3</td>
                        <td>@bet.Points</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private string nickFilter = "";
    private string raceFilter = "";
    private IEnumerable<Bet>? sortedBets;

    protected override async Task OnInitializedAsync()
    {
        var bets = await BetService.GetBetsAsync();
        bets.Reverse();
        sortedBets = bets.GroupBy(x => x.Race)
            .Select(g => g.OrderByDescending(x => x.Points))
            .SelectMany(g => g);
    }
}